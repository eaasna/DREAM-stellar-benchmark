configfile: "config.yaml"

error_rates = ["0", "0025", "005", "0075", "01"]
min_len = config["min_len"]

rule make_all:
	input:
		expand("stellar/{er}.gff", er=error_rates),
		expand("ground_truth/{er}.tsv", er=error_rates)
	shell:
		"echo 'Done'"

rule simulate:
	output:
		ref = "ref.fasta",
		query = "query/one_line.fasta",
		matches = expand("local_matches/{er}.fastq", er=error_rates)
	shell:
		"./scripts/simulate.sh"

rule insert_matches:
	input:
		ref = "ref.fasta",
		query = "query/one_line.fasta",
		matches = "local_matches/{er}.fastq"
	output:
		query = "query/with_insertions_{er}.fasta",
		ground_truth = "ground_truth/{er}.tsv"
	script:
		"scripts/insert_local_matches.py"

def get_float_er(wildcards):
	if (wildcards.er=="0"):
		# minimum allowed error rate should be 1e-7
		a = 1e-5 	  # but 1e-7 and 1e-6 lead to invalid pointer error
		return f'{a:.5f}' # supress scientific notation 
	return float(wildcards.er[:1] + '.' + wildcards.er[1:])

rule stellar:
	input:
		ref = "ref.fasta",
		query = "query/with_insertions_{er}.fasta"
	output: 
		"stellar/{er}.gff"
	params:
		e = get_float_er
	conda:
		"envs/stellar.yaml"
	shell:
		"stellar {input.ref} {input.query} -e {params.e} -l {min_len} -a dna -o {output}"


