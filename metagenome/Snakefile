workdir: config["workdir"]

#-------- Simulation parameters --------
ref_len = config["reference_length"]
haplotype_count = 1
bins = config["ibf_bins"]
bin_list = list(range(int(bins)))
bin_list = [str(bin).zfill(len(str(bins))) for bin in bin_list]

match_length = 250
matches = config["match_count"]
error_rates = [0.075]

def get_simulation_error_count(wildcards):
	error_count = round(match_length * float(wildcards.er))
	return error_count

def get_search_error_rate(wildcards):
	if (float(wildcards.er) <= 0.05):
		return 0
	return float(wildcards.er) - 0.05

#-------- Shared search parameters --------
min_len = 100
fpr = 0.05
cart_capacity = config["max_cart_capacity"]
queued_carts = config["max_queued_carts"]

#-------- Evaluation parameters --------
n = config["repeat"]
min_overlap = 10

#--------\ Shared functions --------
import random
import math

# simulation needs unique seeds otherwise the same sequence is simulated
def get_seed(wildcards):
	return random.randint(0, 1e6)
	
rule make_all:
	input:
		#expand("{b}/valik/e{er}.gff", b = bins, er = error_rates),
		#expand("{b}/stellar/e{er}.gff", b = bins, er = error_rates),
		#expand("{b}/blast/e{er}.tsv", b = bins, er = error_rates)
		expand("{b}/stellar_table1.tsv", b = bins),
		expand("{b}/blast_table1.tsv", b = bins),
		expand("{b}/valik_table1.tsv", b = bins)
	shell:
		"echo 'Done'"

include: "rules/simulate.smk"
include: "rules/dream.smk"
include: "rules/stellar.smk"
include: "rules/blast.smk"
include: "rules/evaluate.smk"
