# All parameters are set in config.yaml
configfile: "simulation_config.yaml"

# Parameters for data simulation 
bin_dir = config["raptor_bin_dir"]
out_dir = config["data_out_dir"]

size = config["ref_size"]
bin_nr = config["number_of_bins"]
epr = config["errors_per_read"]
rl = config["read_length"]
rc = config["read_count"]

# Parameters for mason variator
ht = config["haplotype_count"]
sr = config["snp_rate"]
ir = config["small_indel_rate"]

# Helper variables
digits = len(str(bin_nr))
padding = "".zfill(digits)

# Checking if data was already simulated
import os.path
if os.path.isfile("../data/" + str(bin_nr) + "/reads_e" + str(epr) + "_" + str(rl) + "/0.fastq"):
    print ("Skipping data simulation.")

else:
    # Creating simulated data
    import subprocess
    subprocess.call(['bash', './scripts/metagenome_simulate.sh', bin_dir, out_dir, str(size), str(bin_nr), str(epr), str(rl), str(rc), str(ht), str(sr), str(ir)])

    # Renaming bin files; the filenames must have a specific format e.g 4.fasta not 04.fasta
    subprocess.call(['bash', './scripts/rename_fasta.sh', str(bin_nr), padding])

    # Renaming read files
    subprocess.call(['bash', './scripts/rename_fastq.sh', str(bin_nr), str(epr), str(rl), padding])

    # Simulate a situation where different bins contain similar sequences.
    # Some reads will align to multiple bins.
    if (config["mix_bins"]==1):
        subprocess.call(['bash', './scripts/mix_bins.sh', str(bin_nr)])

rule make_all:
        shell:
                "echo 'Done'"

