n = config["repeat"]
repetitions = list(range(n))

error_rates = [0, 0.025, 0.05, 0.075, 0.1]

# local match lengths 
min_len = 50
max_len = 200

# how much stellar match has to overlap the ground truth
min_overlap = 40

workdir: config["workdir"]

#-------- Simulation parameters --------
ref_len = config["reference_length"]
query_len = config["query_length"]
matches = config["match_count"]

#-------- Valik parameters --------
query_seg_count = config["query_seg_count"]
bins = config["ibf_bins"]
w = config["window"]
k = config["kmer_length"]
size = config["ibf_size"]
overlap = min_len - 2
cart_capacity = config["cart_max_capacity"]
queued_carts = config["max_queued_carts"]

#--------\ Shared functions --------
import random
import math

# simulation needs unique seeds otherwise the same sequence is simulated
def get_seed(wildcards):
        return random.randint(0, 1e6)

def get_search_error_rate(wildcards):
# stellar does not allow 0 error rate
        if (float(wildcards.er) < 0.00001):
                # minimum allowed error rate should be 1e-7
                a = 1e-5          # but 1e-7 and 1e-6 lead to invalid pointer error
                return f'{a:.5f}' # supress scientific notation 
        return float(wildcards.er)

#-------- Shared functions \--------

rule make_all:
	input:
		"table1.tsv",
		"valik_table1.tsv"
		#expand("valik/rep{rep}_e{er}.gff", rep = repetitions, er = error_rates)
	shell:
		"echo 'Done'"

include: "rules/simulate.smk"
include: "rules/dream.smk"
include: "rules/stellar.smk"
include: "rules/evaluate.smk"
