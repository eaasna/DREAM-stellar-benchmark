n = config["repeat"]
repetitions = list(range(n))
print("Number of repetitions " + str(len(repetitions)))
#error_rates = [0, 0.025, 0.05, 0.075, 0.1]
#error_rates = [0, 0.025, 0.05, 0.075]
error_rates = [0]

# local match lengths 
min_len = 50
max_len = 200

# how much stellar match has to overlap the ground truth
min_overlap = 10

workdir: config["workdir"]

#-------- Simulation parameters --------
ref_len = config["reference_length"]
query_len = config["query_length"]
matches = config["match_count"]

#-------- Valik parameters --------
bins = config["ibf_bins"]

size = config["ibf_size"]
overlap = min_len - 1
max_capacity = config["cart_max_capacity"]
max_carts = config["max_queued_carts"]

#-------- Stellar parameters --------
num_matches = config["num_matches"]
sort_thresh = config["sort_threshold"]

#--------\ Shared functions --------
import random
import math

# simulation needs unique seeds otherwise the same sequence is simulated
def get_seed(wildcards):
        return random.randint(0, 1e6)

#-------- Shared functions \--------

rule make_all:
	input:
		#expand("/dev/shm/rep{rep}_e{er}.index", rep = repetitions, er = error_rates)
		expand("valik/rep{rep}_e{er}.gff", rep = repetitions, er = error_rates)
		#"stellar_table1.tsv",
		#"valik_table1.tsv",
		#"blast_table1.tsv"
	shell:
		"echo 'Done'"

include: "rules/simulate.smk"
include: "rules/dream.smk"
include: "rules/stellar.smk"
include: "rules/blast.smk"
include: "rules/evaluate.smk"
