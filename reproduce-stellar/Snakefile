n = config["repeat"]
repetitions = list(range(n))
error_rates = [0, 0.025, 0.05, 0.075, 0.1]

# local match lengths 
min_len = 50
max_len = 200

# how much stellar match has to overlap the ground truth
min_overlap = 10

workdir: config["workdir"]

#-------- Simulation parameters --------
ref_len = config["reference_length"]
query_len = config["query_length"]
matches = config["match_count"]

#-------- Valik parameters --------
query_seg_count = config["query_seg_count"]
bins = config["ibf_bins"]

def get_max_w(wildcards):
    min_shared_count = 4
    if (float(wildcards.er) >= 0.075):
        min_shared_count = 3
    error_count = round(float(wildcards.er) * min_len)
    for w in list(range(21, 3, -1)):
        n = min_len - w + 1
        if (n - w * error_count) > 3:
            return w

def get_k(wildcards):
    w = get_max_w(wildcards)
    print()
    if (w > 10):
        print("Building IBF for (" + str(w - 2) + "," + str(w) + ")-minimisers")
        return (w - 2)
    else:
        print("Building IBF for (" + str(w) + "," + str(w) + ")-minimisers")
        return w

size = config["ibf_size"]
overlap = min_len - 2
max_capacity = config["cart_max_capacity"]
max_carts = config["max_queued_carts"]

#-------- Stellar parameters --------
num_matches = config["num_matches"]
sort_thresh = config["sort_threshold"]

#--------\ Shared functions --------
import random
import math

# simulation needs unique seeds otherwise the same sequence is simulated
def get_seed(wildcards):
        return random.randint(0, 1e6)

def get_search_error_rate(wildcards):
# stellar does not allow 0 error rate
        if (float(wildcards.er) < 0.00001):
                # minimum allowed error rate should be 1e-7
                a = 1e-5          # but 1e-7 and 1e-6 lead to invalid pointer error
                return f'{a:.5f}' # supress scientific notation 
        return float(wildcards.er)

#-------- Shared functions \--------

rule make_all:
	input:
		#"stellar_table1.tsv",
		"valik_table1.tsv"
		#"blast_table1.tsv"
		#expand("stellar/rep{rep}_e{er}.gff", rep = repetitions, er = error_rates),
		#expand("valik/rep{rep}_e{er}.gff", rep = repetitions, er = error_rates)
	shell:
		"echo 'Done'"

include: "rules/simulate.smk"
include: "rules/dream.smk"
include: "rules/stellar.smk"
include: "rules/blast.smk"
include: "rules/evaluate.smk"
