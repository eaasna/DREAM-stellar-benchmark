n = config["repeat"]
repetitions = list(range(n))

workdir: config["workdir"]

#-------- Local match definition --------
# maximum error rate
error_rate = 0.05
# minimum local match length 
min_len = 100

#-------- Simulation parameters --------
ref_len = config["reference_length"]
match_count = config["nr_matches"]

#-------- Valik parameters --------
query_seg_count = config["query_seg_count"]
bins = config["ibf_bins"]
w = config["window"]
k = config["kmer_length"]
size = config["ibf_size"]
overlap = min_len - 2
cart_capacity = config["cart_max_capacity"]
queued_carts = config["max_queued_carts"]

#-------- Stellar parameters --------
num_matches = config["num_matches"]
sort_thresh = config["sort_threshold"]

#--------\ Shared functions --------
import random
import math

# simulation needs unique seeds otherwise the same sequence is simulated
def get_seed(wildcards):
        return random.randint(0, 1e6)

def get_search_error_rate(wildcards):
# stellar does not allow 0 error rate
        if (float(error_rate) < 0.00001):
                # minimum allowed error rate should be 1e-7
                a = 1e-5          # but 1e-7 and 1e-6 lead to invalid pointer error
                return f'{a:.5f}' # supress scientific notation 
        return float(error_rate)

#-------- Shared functions \--------

rule make_all:
	input:
		expand("stellar/rep{rep}.gff", rep = repetitions),	
		expand("valik/rep{rep}.gff", rep = repetitions)
	shell:
		"echo 'Done'"

include: "rules/simulate.smk"
include: "rules/dream.smk"
include: "rules/stellar.smk"
