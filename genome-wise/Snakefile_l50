workdir : config["workdir"]
stellar = "/group/ag_abi/evelina/stellar3/build/bin/stellar"
valik = config["valik_exec"]

stellar_out=config["stellar_out"]
blast_out=config["blast_out"]
lastz_out=config["lastz_out"]
dream_out=config["dream_out"]
last_out=config["last_out"]

#-------- split parameters --------
fpr_list = config["ibf_fpr"]
bin_list = config["ibf_bins"]
min_lens = config["min_len"]

#-------- build parameters --------
minimiser_flag = config["minimiser_flag"]
cmin_list = config["kmer_cmin"]
cmax_list = config["kmer_cmax"]

#-------- search parameters --------
valik_kmer_lengths = config["valik_kmer_lengths"]
valik_shapes = config["valik_shapes"]
valik_thresh = config["valik_thresh"]
errors = config["errors"]
repeat_flag = config["repeat_flag"]
bin_entropy_cutoffs = [1.0]
if (repeat_flag == "--keep-best-repeats"):
	bin_entropy_cutoffs = config["bin_entropy_cutoffs"]

cart_max_capacity = config["cart_max_capacity"]
max_queued_carts = config["max_queued_carts"]

num_matches = 20000
sort_thresh = num_matches + 1
repeat_periods = config["repeat_periods"]
repeat_lengths = config["repeat_lengths"]
search_threads = workflow.cores

#-------- BLAST parameters --------
evalues = config["evalues"]
blast_kmer_lengths = config["blast_kmer_lengths"]

def get_shape_threshold(wildcards):
	min_len = int(wildcards.min_len)
	shape = wildcards.s
	errors = int(wildcards.er)

	shape_size = len(shape)
	shape_weight = shape.count("1")
	kmer_lemma = min_len - shape_size + 1 - (errors * shape_weight)
	threshold = round(kmer_lemma * 1.5)
	return threshold	

def percid_from_k(wildcards):
	min_len = min_lens[0]
	highest_e = 1
	for e in range(2, 16):
		if ((min_len - int(wildcards.k) + 1) - int(wildcards.k) * e) < 0:
			print("percid:" + str(100 - (highest_e / min_len) * 100))
			return 100 - (highest_e / min_len) * 100
		highest_e = e

#-------- LASTZ parameters --------
lastz_seeds = config["lastz_seed"]
gap_flag = "gapped"
transition_flag = config["seed_transition"]
step_length = config["step_length"]

#-------- Evaluation parameters --------
n = 1
min_overlap = config["min_overlap"]
run_id = config["run_id"]
comparison_evalue = 0.1

#--------\ Shared functions --------
import random
import math
import os

def dir_path(filename):
	return os.path.split(filename)[0] + "/"

def get_error_rate(wildcards):
	return int(wildcards.er) / int(wildcards.min_len)


#-------- Shared functions \--------

wildcard_constraints:
	k="[0-9][0-9]",
	er="[0-9]",
	cmax="[0-9]+"

rule make_all:
	input:
#		blast_out + "/blast.stellar.accuracy",
#		blast_out + "/blast.valik.accuracy",
#		dream_out + "/valik.stellar.accuracy",
#		dream_out + "/valik.blast.accuracy",
#		dream_out + "/valik.stellar.accuracy.k",
#		dream_out + "/valik.stellar.accuracy.s"
#		dream_out + "/valik.blast.accuracy.k"
#		lastz_out + "/lastz.stellar.accuracy"
		last_out + "/last.stellar.accuracy"
#		expand(dream_out + "/b{b}_fpr{fpr}_l{min_len}_cmin{cmin}_cmax{cmax}_e{er}_s{s}_thresh{thresh}_ent{bin_ent}_cap{max_cap}_carts{max_carts}_t{t}.gff", b = bin_list, fpr = fpr_list, min_len = min_lens, cmin = cmin_list, cmax = cmax_list, er = errors, s = valik_shapes, thresh = valik_thresh, bin_ent = bin_entropy_cutoffs, max_cap = cart_max_capacity, max_carts = max_queued_carts, t = search_threads)
#		expand(dream_out + "/b{b}_fpr{fpr}_l{min_len}_cmin{cmin}_cmax{cmax}_e{er}_ent{bin_ent}_cap{max_cap}_carts{max_carts}_t{t}_rp{rp}_rl{rl}.gff", b = bin_list, fpr = fpr_list, min_len = min_lens, cmin = cmin_list, cmax = cmax_list, er = errors, bin_ent = bin_entropy_cutoffs, max_cap = cart_max_capacity, max_carts = max_queued_carts, t = search_threads, rp = repeat_periods, rl = repeat_lengths)
#		expand(dream_out + "/b{b}_fpr{fpr}_l{min_len}_cmin{cmin}_cmax{cmax}_e{er}_ent{bin_ent}_cap{max_cap}_carts{max_carts}_t{t}_rp{rp}_rl{rl}.gff", b = bin_list, fpr = fpr_list, min_len = min_lens, cmin = cmin_list, cmax = cmax_list, er = errors, bin_ent = bin_entropy_cutoffs, max_cap = cart_max_capacity, max_carts = max_queued_carts, t = search_threads, rp = repeat_periods, rl = repeat_lengths)
#		expand(dream_out + "/meta/b{b}_fpr{fpr}_l{min_len}_e{er}.bin", b = bin_list, fpr = fpr_list, min_len = min_lens, er = errors)
	shell:
		"echo 'Done'"

#include: "rules/prepare.smk"
#include: "rules/stellar.smk"
#include: "rules/dream.smk"
#include: "rules/blast.smk"
#include: "rules/lastz.smk"
include: "rules/last.smk"
include: "rules/accuracy.smk"

